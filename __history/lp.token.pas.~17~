unit lp.token;

interface

uses Classes;

type
  TTokenType = (
    // base
      ttILLEGAL
    , ttEOF
    , ttNUMBER
    // Operators
    , ttPLUS      // = "+"
    , ttMINUS     // = "-"
    , ttASTERISK  // = "*"
    , ttSLASH     // = "/"
    // others
    , ttLPAREN    // = "("
    , ttRPAREN    // = ")"
    , ttSEMICOLON // = ";"

    , ttLET // = "LET"
    , ttASSIGN // = "="
  );

  TToken = class
  public
    constructor create(ATokenType:TTokenType; ALiteral:string);
    function toString:string;
  public
    TokenType:TTokenType;
    Literal:string;
  end;

implementation

var
  keywords:TStringList;

{ TToken }

constructor TToken.create(ATokenType: TTokenType; ALiteral: string);
begin
  TokenType := ATokenType;
  Literal := ALiteral;
end;

function TToken.toString: string;
const
  TTypeStr: array[TTokenType] of string = (
    'ILLEGAL'
    , 'EOF'
    , 'NUMBER'
    , 'PLUS'
    , 'MINUS'
    , 'ASTERISK'
    , 'SLASH'
    , 'LPAREN'
    , 'RPAREN'
    , 'SEMICOLON'
    , 'LET'
    , 'ASSIGN'
  );
begin
  Result := 'TK Type = ' + TTypeStr[TokenType] + ', literal value = ' + Literal;
end;


procedure init;
begin
  keywords := TStringList.Create;
  keywords.Add('fn');
end;

procedure deinit;
begin
  keywords.Free;
end;

initialization
  init;

finalization
  deinit;

end.
